var _0xf6be = ["\x31\x46\x32\x30\x30\x30\x38\x38", "\x66\x6C\x6F\x6F\x72", "\x75\x6E\x73\x68\x69\x66\x74", "\x6C\x65\x6E\x67\x74\x68", "\x6D\x69\x6E", "\x6A\x6F\x69\x6E", "\x73\x6C\x69\x63\x65", "\x76\x61\x6C\x75\x65", "\x2E\x2F\x44\x61\x74\x61\x50\x61\x63\x6B\x61\x67\x65", "\x6F\x62\x74\x61\x69\x6E\x31", "\x6F\x62\x74\x61\x69\x6E\x32", "\x6F\x62\x74\x61\x69\x6E\x33", "\x30", "\x70\x75\x73\x68", "", "\x65\x78\x70\x6F\x72\x74\x73"]; const HOST_TO_DEVICE_DATA_START = 0x1F; const DEVICE_TO_HOST_DATA_START = 0x1F; const FIXED_PACKAGE_CRC_RESULT = 0x88; const FIXED_NDEF_INTENT_START = 0xAA; const FIXED_NDEF_INTENT_END = 0xBB; const defaultThreshold = 128; const maxEBVValue = 0x3FFF; const superBitmapRLELength = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 24, 36, 48, 120]; const MySendMaxCount = 255; var supportSuperBitmap = false; const LineActionNone = 0; const LineActionLine = 1; const LineActionPrint = 2; var mByteWidth = 384 / 8; var mLineAction = LineActionNone; var mPrinterDPI = 203; var mPrinterWidth = 384; var mLineCount; var mLineBytes; var mLineData; var mPrevBytes; var mPrevData; var mPageParamOffset; var mLELineDots; var mLELineDotsCount; var mLELineDotsIndex; var mMaxSfDots; var mMaxLEDots; var mMinSfDots; var mTotalDots; var mSumLines; var mSumPrints; var mSumRLE_Xs; var mSumRLE_Ds; var mSumRepeats; var mRLEXSaved; var mRLEDSaved; var arrayBitmap; function copyTo(_0x2a9ax28, _0x2a9ax29, _0x2a9ax2a, _0x2a9ax2b, _0x2a9ax2c) { if (_0x2a9ax28 == _0x2a9ax2a) { if (_0x2a9ax29 == _0x2a9ax2b) { return }; if (_0x2a9ax29 > _0x2a9ax2b) { _0x2a9ax29 += _0x2a9ax2c - _0x2a9ax2b - 1; for (--_0x2a9ax2c; _0x2a9ax2c >= _0x2a9ax2b; --_0x2a9ax2c, --_0x2a9ax29) { _0x2a9ax28[_0x2a9ax29] = _0x2a9ax2a[_0x2a9ax2c] }; return } }; for (; _0x2a9ax2b < _0x2a9ax2c; ++_0x2a9ax2b, ++_0x2a9ax29) { _0x2a9ax28[_0x2a9ax29] = _0x2a9ax2a[_0x2a9ax2b] } } function pageStartData() { return _0xf6be[0] } function pageEndData() { return [0x1F, 0x28, 0x00, 0x88] } function pageWidthData(_0x2a9ax30) { _0x2a9ax30 = Math[_0xf6be[1]]((_0x2a9ax30 + 7) / 8); if (_0x2a9ax30 >= 0xC0) { return [0x1F, 0x27, 0x02, 0xC0 | (_0x2a9ax30 >> 8), _0x2a9ax30 & 0xFF, 0x88] } else { return [0x1F, 0x27, 0x01, _0x2a9ax30, 0x88] } } function pageHeightData(_0x2a9ax32) { if (_0x2a9ax32 > 0x3FFF) { return [0x1F, 0x26, 0x03, 0xC0, 0x3FFF | (_0x2a9ax32 >> 8), _0x2a9ax32 & 0xFF, 0x88] } else { if (_0x2a9ax32 >= 0xC0) { return [0x1F, 0x26, 0x02, 0xC0 | (_0x2a9ax32 >> 8), _0x2a9ax32 & 0xFF, 0x88] } else { return [0x1F, 0x26, 0x01, _0x2a9ax32, 0x88] } } } function settingGapTypeData(_0x2a9ax34) { return [0x1F, 0x42, 0x01, (_0x2a9ax34), 0x88] } function settingGapLengthData(_0x2a9ax36) { if (_0x2a9ax36 > 0x3FFF) { return [0x1F, 0x45, 0x03, 0xC0 | (_0x2a9ax36 >> 16), (_0x2a9ax36 >> 8), _0x2a9ax36 & 0xFF, 0x88] } else { if (_0x2a9ax36 >= 0xC0) { return [0x1F, 0x45, 0x02, 0xC0 | (_0x2a9ax36 >> 8), _0x2a9ax36 & 0xFF, 0x88] } else { return [0x1F, 0x45, 0x01, _0x2a9ax36, 0x88] } } } function settingStrengthData(_0x2a9ax38) { return [0x1F, 0x43, 0x01, _0x2a9ax38, 0x88] } function settingSpeedData(_0x2a9ax3a) { return [0x1F, 0x44, 0x01, _0x2a9ax3a, 0x88] } function arrayWithImage(_0x2a9ax3c, _0x2a9ax30, _0x2a9ax32, _0x2a9ax34, _0x2a9ax3d, _0x2a9ax3e, _0x2a9ax3f, _0x2a9ax40) { supportSuperBitmap = _0x2a9ax40; arrayBitmap = new Array(); mLELineDots = [(mPrinterDPI * 3 / 25.4 + 0.5)]; mLineAction = LineActionLine; mByteWidth = Math[_0xf6be[1]]((mPrinterWidth + 7) / 8); mLineCount = 0; mLineBytes = 0; mLineData = null; mPrevBytes = 0; mPrevData = null; mLELineDotsCount = 0; mLELineDotsIndex = 0; mMaxSfDots = 0; mMaxLEDots = 0; mMinSfDots = 0; mTotalDots = 0; mSumLines = 0; mSumPrints = 0; mSumRLE_Xs = 0; mSumRLE_Ds = 0; mSumRepeats = 0; mRLEXSaved = 0; mRLEDSaved = 0; pushPackageWithData(pageWidthData(_0x2a9ax30)); pushPackageWithData(pageHeightData(_0x2a9ax32)); if (_0x2a9ax34 >= 0) { }; if (_0x2a9ax34 != 0) { }; if (_0x2a9ax3e > 0) { }; if (_0x2a9ax3f > 0) { }; parsePixelDatas(_0x2a9ax3c, _0x2a9ax30, _0x2a9ax32); switch (mLineAction) { case LineActionLine: { pushLineWithCount(mLineCount); break }; case LineActionPrint: { pushPrint(); pushLineWithCount(0); break }; default: return false }; mLineAction = LineActionNone; arrayBitmap[_0xf6be[2]](pageStartData()); pushPackageWithData(pageEndData()); return arrayBitmap } function parsePixelDatas(_0x2a9ax3c, _0x2a9ax30, _0x2a9ax32) { var _0x2a9ax42; var _0x2a9ax43 = 0; var _0x2a9ax44 = Math[_0xf6be[1]]((_0x2a9ax30 + 7) / 8); for (var _0x2a9ax45 = 0; _0x2a9ax45 < _0x2a9ax32; _0x2a9ax45++) { var _0x2a9ax46 = [_0x2a9ax44]; for (var _0x2a9ax47 = 0; _0x2a9ax47 < _0x2a9ax44; _0x2a9ax47++) { _0x2a9ax46[_0x2a9ax47] = 0 }; var _0x2a9ax48 = 0; var _0x2a9ax49 = 0; var _0x2a9ax4a = 0; var _0x2a9ax4b = 0; var _0x2a9ax4c = 0; var _0x2a9ax4d = 0; var _0x2a9ax4e = 0; var _0x2a9ax4f = 0; for (var _0x2a9ax50 = 0; _0x2a9ax50 < _0x2a9ax30; _0x2a9ax50++) { var _0x2a9ax51 = _0x2a9ax50 % 8; if (_0x2a9ax51 == 0) { _0x2a9ax48 = 0x00; _0x2a9ax49 = 0x00; _0x2a9ax4a = 0x00; _0x2a9ax4b = 0x00; _0x2a9ax4c = 0x00; _0x2a9ax4d = 0x00; _0x2a9ax4e = 0x00; _0x2a9ax4f = 0x00 }; var _0x2a9ax52 = ((_0x2a9ax30 * _0x2a9ax45) + _0x2a9ax50) * 4; var _0x2a9ax53 = _0x2a9ax3c[_0x2a9ax52 + 0]; var _0x2a9ax54 = _0x2a9ax3c[_0x2a9ax52 + 1]; var _0x2a9ax55 = _0x2a9ax3c[_0x2a9ax52 + 2]; var _0x2a9ax56 = _0x2a9ax3c[_0x2a9ax52 + 3]; if (_0x2a9ax56 > 0) { var _0x2a9ax57 = (_0x2a9ax53 * 0.3 + _0x2a9ax54 * 0.59 + _0x2a9ax55 * 0.11); if (_0x2a9ax57 <= defaultThreshold) { if (_0x2a9ax51 == 0) { _0x2a9ax48 = 0x80 } else { if (_0x2a9ax51 == 1) { _0x2a9ax49 = (0x80 >> 1) } else { if (_0x2a9ax51 == 2) { _0x2a9ax4a = (0x80 >> 2) } else { if (_0x2a9ax51 == 3) { _0x2a9ax4b = (0x80 >> 3) } else { if (_0x2a9ax51 == 4) { _0x2a9ax4c = (0x80 >> 4) } else { if (_0x2a9ax51 == 5) { _0x2a9ax4d = (0x80 >> 5) } else { if (_0x2a9ax51 == 6) { _0x2a9ax4e = (0x80 >> 6) } else { if (_0x2a9ax51 == 7) { _0x2a9ax4f = (0x80 >> 7) } } } } } } } } } }; if (_0x2a9ax51 == 7 || _0x2a9ax50 == _0x2a9ax30 - 1) { var _0x2a9ax52 = Math[_0xf6be[1]](_0x2a9ax50 / 8); var _0x2a9ax58 = _0x2a9ax48 | _0x2a9ax49 | _0x2a9ax4a | _0x2a9ax4b | _0x2a9ax4c | _0x2a9ax4d | _0x2a9ax4e | _0x2a9ax4f; _0x2a9ax46[_0x2a9ax52] = _0x2a9ax58 } }; var _0x2a9ax59 = _0x2a9ax44 - 1; for (; _0x2a9ax59 >= 0; _0x2a9ax59--) { if (_0x2a9ax46[_0x2a9ax59] != 0) { break } }; var _0x2a9ax5a = 0; for (; _0x2a9ax5a < _0x2a9ax59; _0x2a9ax5a++) { if (_0x2a9ax46[_0x2a9ax5a] != 0) { break } }; var _0x2a9ax5b = _0x2a9ax59 + 1 - _0x2a9ax5a; var _0x2a9ax5c = [_0x2a9ax5b + 4]; _0x2a9ax5c[0] = 0x1F; _0x2a9ax5c[1] = 0x2B; _0x2a9ax5c[2] = _0x2a9ax5a; _0x2a9ax5c[3] = _0x2a9ax5b; if (_0x2a9ax5b > 0) { for (var _0x2a9ax5d = 0; _0x2a9ax5d < _0x2a9ax5b; _0x2a9ax5d++) { _0x2a9ax5c[_0x2a9ax5d + 4] = _0x2a9ax46[_0x2a9ax5d + _0x2a9ax5a] } }; if (_0x2a9ax42 == null) { pushPackageWithData(_0x2a9ax5c); _0x2a9ax42 = _0x2a9ax5c } else { if (_0x2a9ax5c.toString() == _0x2a9ax42.toString()) { _0x2a9ax43++ } else { if (_0x2a9ax43 > 0) { if (_0x2a9ax43 <= 255) { var _0x2a9ax5e = [0x1F, 0x2E, _0x2a9ax43 - 1]; pushPackageWithData(_0x2a9ax5e) } else { for (var _0x2a9ax5f = 255; _0x2a9ax5f > 0;) { var _0x2a9ax5e = [0x1F, 0x2E, _0x2a9ax5f - 1]; pushPackageWithData(_0x2a9ax5e); _0x2a9ax43 -= _0x2a9ax5f; _0x2a9ax5f = _0x2a9ax43 > 255 ? 255 : _0x2a9ax43 } }; _0x2a9ax43 = 0 }; pushPackageWithData(_0x2a9ax5c); _0x2a9ax42 = _0x2a9ax5c } } }; if (_0x2a9ax43 > 0) { var _0x2a9ax5e = [0x1F, 0x2E, _0x2a9ax43 - 1]; pushPackageWithData(_0x2a9ax5e); _0x2a9ax43 = 0 } } function addNoneRow(_0x2a9ax61) { if (_0x2a9ax61 > 0) { if (_0x2a9ax61 <= MySendMaxCount) { pushPackageWithData([0x1F, 0x2A, _0x2a9ax61, 0x00, 0x00]) } else { for (var _0x2a9ax5f = MySendMaxCount; _0x2a9ax5f > 0;) { pushPackageWithData([0x1F, 0x2A, _0x2a9ax5f, 0x00, 0x00]); _0x2a9ax61 -= _0x2a9ax5f; _0x2a9ax5f = _0x2a9ax61 > MySendMaxCount ? MySendMaxCount : _0x2a9ax61 } } } } function printRow(_0x2a9ax46, _0x2a9ax5b) { if (mLineAction == LineActionNone) { return false }; var _0x2a9ax63; for (_0x2a9ax63 = Math[_0xf6be[4]](_0x2a9ax46[_0xf6be[3]], mByteWidth) - 1; _0x2a9ax63 >= 0; --_0x2a9ax63) { if (_0x2a9ax46[_0x2a9ax63] != 0x00) { break } }; if (_0x2a9ax63 < 0) { return lineWithCount(_0x2a9ax5b) }; ++_0x2a9ax63; switch (mLineAction) { case LineActionLine: { pushLineWithCount(mLineCount); break }; case LineActionPrint: { if (mLineBytes == _0x2a9ax63 && equalsByteWithData1(mLineData, _0x2a9ax46, 0, _0x2a9ax63)) { mLineCount += _0x2a9ax5b; return true }; pushPrint(); break }; default: return false }; mPrevData = mLineData; mPrevBytes = mLineBytes; mLineData = _0x2a9ax46; mLineBytes = _0x2a9ax63; mLineCount = _0x2a9ax5b; mLineAction = LineActionPrint; return true } function equalsByteWithData1(_0x2a9ax65, _0x2a9ax66, _0x2a9ax67, _0x2a9ax68) { if (_0x2a9ax67 < 0 || _0x2a9ax67 >= _0x2a9ax68) { return false }; if (_0x2a9ax68 > _0x2a9ax65[_0xf6be[3]] || _0x2a9ax68 > _0x2a9ax66[_0xf6be[3]]) { return false }; var _0x2a9ax69 = _0x2a9ax65[_0xf6be[6]](_0x2a9ax67, _0x2a9ax68)[_0xf6be[5]](); var _0x2a9ax6a = _0x2a9ax66[_0xf6be[6]](_0x2a9ax67, _0x2a9ax68)[_0xf6be[5]](); if (_0x2a9ax69 != _0x2a9ax6a) { return false }; return true } function appendRLEData(_0x2a9ax6c, _0x2a9ax6d, _0x2a9ax6e, _0x2a9ax6f) { if (_0x2a9ax6f <= 0) { return true }; var _0x2a9ax70 = (_0x2a9ax6d[_0xf6be[7]] * 5 / 8); var _0x2a9ax52 = (16 - 1); while (_0x2a9ax6f > 0) { if (_0x2a9ax6f >= superBitmapRLELength[_0x2a9ax52]) { _0x2a9ax6f -= superBitmapRLELength[_0x2a9ax52]; var _0x2a9ax71 = (_0x2a9ax52 | (_0x2a9ax6e ? 0x10 : 0x00)); _0x2a9ax6d[_0xf6be[7]] = _0x2a9ax6d[_0xf6be[7]] + 1; if (_0x2a9ax6d[_0xf6be[7]] * 5 > mByteWidth * 8) { return false }; switch (_0x2a9ax6d[_0xf6be[7]] % 8) { case 0: _0x2a9ax6c[_0x2a9ax70++] |= _0x2a9ax71; break; case 1: _0x2a9ax6c[_0x2a9ax70] |= (_0x2a9ax71 << 3); break; case 2: _0x2a9ax6c[_0x2a9ax70++] |= (_0x2a9ax71 >>> 2); _0x2a9ax6c[_0x2a9ax70] |= (_0x2a9ax71 & 0x03) << 6; break; case 3: _0x2a9ax6c[_0x2a9ax70] |= (_0x2a9ax71 << 1); break; case 4: _0x2a9ax6c[_0x2a9ax70++] |= (_0x2a9ax71 >>> 4); _0x2a9ax6c[_0x2a9ax70] |= (_0x2a9ax71 & 0x0F) << 4; break; case 5: _0x2a9ax6c[_0x2a9ax70++] |= (_0x2a9ax71 >>> 1); _0x2a9ax6c[_0x2a9ax70] |= (_0x2a9ax71 & 0x01) << 7; break; case 6: _0x2a9ax6c[_0x2a9ax70] |= (_0x2a9ax71 << 2); break; case 7: _0x2a9ax6c[_0x2a9ax70++] |= (_0x2a9ax71 >>> 3); _0x2a9ax6c[_0x2a9ax70] |= (_0x2a9ax71 & 0x07) << 5; break; default: break } } else { --_0x2a9ax52 } }; return true } function calcRLEX(_0x2a9ax5e, _0x2a9ax5b, _0x2a9ax6c) { if (_0x2a9ax5b <= 0) { return 0 }; var _0x2a9ax6f = 0; var _0x2a9ax52 = 0; var _0x2a9ax6e = false; var _0x2a9ax73 = (0x80); var _0x2a9ax6d = { value: 0 }; while (true) { if ((_0x2a9ax5e[_0x2a9ax52] & _0x2a9ax73) != 0) { if (_0x2a9ax6e) { ++_0x2a9ax6f } else { if (!appendRLEData(_0x2a9ax6c, _0x2a9ax6d, false, _0x2a9ax6f)) { return 0 }; _0x2a9ax6e = true; _0x2a9ax6f = 1 } } else { if (_0x2a9ax6e) { if (!appendRLEData(_0x2a9ax6c, _0x2a9ax6d, true, _0x2a9ax6f)) { return 0 }; _0x2a9ax6e = false; _0x2a9ax6f = 1 } else { ++_0x2a9ax6f } }; if (_0x2a9ax73 == 0x01) { ++_0x2a9ax52; if (_0x2a9ax52 >= _0x2a9ax5b) { break }; _0x2a9ax73 = (0x80) } else { _0x2a9ax73 >>>= 1 } }; if (_0x2a9ax6e && !appendRLEData(_0x2a9ax6c, _0x2a9ax6d, true, _0x2a9ax6f)) { return 0 }; return _0x2a9ax6d[_0xf6be[7]] } function calcRLED(_0x2a9ax75, _0x2a9ax76, _0x2a9ax77, _0x2a9ax78, _0x2a9ax6c) { var _0x2a9ax6f = 0; var _0x2a9ax52 = 0; var _0x2a9ax79 = false; var _0x2a9ax73 = (0x80); var _0x2a9ax6d = { value: 0 }; var _0x2a9ax5b = Math[_0xf6be[4]](_0x2a9ax76, _0x2a9ax78); if (_0x2a9ax5b > 0) { while (true) { if ((_0x2a9ax77[_0x2a9ax52] & _0x2a9ax73) != (_0x2a9ax75[_0x2a9ax52] & _0x2a9ax73)) { if (_0x2a9ax79) { ++_0x2a9ax6f } else { if (!appendRLEData(_0x2a9ax6c, _0x2a9ax6d, false, _0x2a9ax6f)) { return 0 }; _0x2a9ax79 = true; _0x2a9ax6f = 1 } } else { if (_0x2a9ax79) { if (!appendRLEData(_0x2a9ax6c, _0x2a9ax6d, true, _0x2a9ax6f)) { return 0 }; _0x2a9ax79 = false; _0x2a9ax6f = 1 } else { ++_0x2a9ax6f } }; if (_0x2a9ax73 == 0x01) { ++_0x2a9ax52; if (_0x2a9ax52 >= _0x2a9ax5b) { break }; _0x2a9ax73 = (0x80) } else { _0x2a9ax73 >>>= 1 } } }; if (_0x2a9ax76 != _0x2a9ax78) { if (_0x2a9ax76 < _0x2a9ax78) { _0x2a9ax75 = _0x2a9ax77; _0x2a9ax76 = _0x2a9ax78 }; _0x2a9ax73 = (0x80); while (true) { if (0 != (_0x2a9ax75[_0x2a9ax52] & _0x2a9ax73)) { if (_0x2a9ax79) { ++_0x2a9ax6f } else { if (!appendRLEData(_0x2a9ax6c, _0x2a9ax6d, false, _0x2a9ax6f)) { return 0 }; _0x2a9ax79 = true; _0x2a9ax6f = 1 } } else { if (_0x2a9ax79) { if (!appendRLEData(_0x2a9ax6c, _0x2a9ax6d, true, _0x2a9ax6f)) { return 0 }; _0x2a9ax79 = false; _0x2a9ax6f = 1 } else { ++_0x2a9ax6f } }; if (_0x2a9ax73 == 0x01) { ++_0x2a9ax52; if (_0x2a9ax52 >= _0x2a9ax76) { break }; _0x2a9ax73 = (0x80) } else { _0x2a9ax73 >>>= 1 } } }; if (_0x2a9ax79 && !appendRLEData(_0x2a9ax6c, _0x2a9ax6d, true, _0x2a9ax6f)) { return 0 }; return _0x2a9ax6d[_0xf6be[7]] } function pushEBV(_0x2a9ax7b, _0x2a9ax7c, _0x2a9ax5e) { if (_0x2a9ax5e >= 0xC0) { _0x2a9ax7b[_0x2a9ax7c + 0] = ((_0x2a9ax5e >>> 8) | 0xC0); _0x2a9ax7b[_0x2a9ax7c + 1] = (_0x2a9ax5e & 0xFF); return _0x2a9ax7c + 2 } else { _0x2a9ax7b[_0x2a9ax7c + 0] = (_0x2a9ax5e); return _0x2a9ax7c + 1 } } function pushRepeat(_0x2a9ax5b) { if (_0x2a9ax5b <= 0) { return }; mSumRepeats += _0x2a9ax5b; var _0x2a9ax5e = [0x1F, 0x2E, 0x00, 0x00]; for (; _0x2a9ax5b > maxEBVValue; _0x2a9ax5b -= maxEBVValue + 1) { pushEBV(_0x2a9ax5e, 2, (maxEBVValue)); var _0x2a9ax7e = require(_0xf6be[8]); pushPackageWithData(_0x2a9ax7e[_0xf6be[9]](_0x2a9ax5e)) }; if (_0x2a9ax5b > 0) { var _0x2a9ax7c = pushEBV(_0x2a9ax5e, 2, (_0x2a9ax5b - 1)); var _0x2a9ax7e = require(_0xf6be[8]); pushPackageWithData(_0x2a9ax7e[_0xf6be[10]](_0x2a9ax5e, _0x2a9ax7c)) } } function pushPrintDots(_0x2a9ax80, _0x2a9ax81) { if (mMaxSfDots < _0x2a9ax80) { mMaxSfDots = _0x2a9ax80 } else { if (_0x2a9ax80 > 0) { if (mMinSfDots == 0 || mMinSfDots > _0x2a9ax80) { mMinSfDots = _0x2a9ax80 } } }; mTotalDots += _0x2a9ax80 * _0x2a9ax81; if (_0x2a9ax81 >= mLELineDots[_0xf6be[3]]) { for (var _0x2a9ax44 = 0; _0x2a9ax44 < mLELineDots[_0xf6be[3]]; ++_0x2a9ax44) { mLELineDots[_0x2a9ax44] = _0x2a9ax80 }; mLELineDotsCount = mLELineDots[_0xf6be[3]] * _0x2a9ax80; if (mMaxLEDots < _0x2a9ax80) { mMaxLEDots = _0x2a9ax80 } } else { mLELineDotsCount += _0x2a9ax81 * _0x2a9ax80; for (var _0x2a9ax44 = 0; _0x2a9ax44 < _0x2a9ax81; ++_0x2a9ax44) { mLELineDotsCount -= mLELineDots[mLELineDotsIndex]; mLELineDots[mLELineDotsIndex] = _0x2a9ax80; ++mLELineDotsIndex; if (mLELineDotsIndex >= mLELineDots[_0xf6be[3]]) { mLELineDotsIndex = 0 } }; var _0x2a9ax82 = mLELineDotsCount / mLELineDots[_0xf6be[3]]; if (mMaxLEDots < _0x2a9ax82) { mMaxLEDots = _0x2a9ax82 } } } function pushRLE(_0x2a9ax84, _0x2a9ax5e, _0x2a9ax85) { if (_0x2a9ax85 <= 0) { return }; var _0x2a9ax86 = (_0x2a9ax85 * 5 + 8 - 1) / 8; var _0x2a9ax87 = [2 + 2 + _0x2a9ax86 + 4]; _0x2a9ax87[0] = 0x1F; _0x2a9ax87[1] = _0x2a9ax84; var _0x2a9ax7c = pushEBV(_0x2a9ax87, 2, _0x2a9ax85); copyTo(_0x2a9ax87, _0x2a9ax7c, _0x2a9ax5e, 0, _0x2a9ax86); var _0x2a9ax7e = require(_0xf6be[8]); pushPackageWithData(_0x2a9ax7e[_0xf6be[11]](_0x2a9ax87, 0, _0x2a9ax7c + _0x2a9ax86)) } function pushPrint() { if (mLineCount <= 0) { return }; var _0x2a9ax5e = mLineData; var _0x2a9ax5b = mLineCount; var _0x2a9ax89 = 0; var _0x2a9ax8a = 0; var _0x2a9ax80 = 0; for (; _0x2a9ax89 < mLineBytes; ++_0x2a9ax89) { if (_0x2a9ax5e[_0x2a9ax89] != 0x00) { break } }; _0x2a9ax8a = mLineBytes - _0x2a9ax89; for (var _0x2a9ax44 = _0x2a9ax89; _0x2a9ax44 < mLineBytes; ++_0x2a9ax44) { _0x2a9ax80 += getBit1Count(_0x2a9ax5e[_0x2a9ax44]) }; pushPrintDots(_0x2a9ax80, _0x2a9ax5b); if (mSumPrints > 0) { var _0x2a9ax8b = [mByteWidth + 4]; var _0x2a9ax8c = [mByteWidth + 4]; var _0x2a9ax8d = 0; var _0x2a9ax8e = 0; _0x2a9ax8d = calcRLEX(_0x2a9ax5e, mLineBytes, _0x2a9ax8b); _0x2a9ax8e = calcRLED(mPrevData, mPrevBytes, _0x2a9ax5e, mLineBytes, _0x2a9ax8c); var _0x2a9ax8f = ((_0x2a9ax89 >= 0xC0 ? 4 : 3) + (_0x2a9ax8a >= 0xC0 ? 2 : 1) + _0x2a9ax8a); var _0x2a9ax90 = (_0x2a9ax8d <= 0 ? mByteWidth + 100 : (_0x2a9ax8d * 5 + 8 - 1) / 8 + (_0x2a9ax8d >= 0xC0 ? 4 : 3)); var _0x2a9ax91 = (_0x2a9ax8e <= 0 ? mByteWidth + 100 : (_0x2a9ax8e * 5 + 8 - 1) / 8 + (_0x2a9ax8e >= 0xC0 ? 4 : 3)); if (_0x2a9ax90 < _0x2a9ax8f && _0x2a9ax90 <= _0x2a9ax91) { mSumRLE_Xs += _0x2a9ax5b; mRLEXSaved += _0x2a9ax8f - _0x2a9ax90; pushRLE(0x2C, _0x2a9ax8b, _0x2a9ax8d) } else { if (_0x2a9ax91 < _0x2a9ax8f) { mSumRLE_Ds += _0x2a9ax5b; mRLEDSaved += _0x2a9ax8f - _0x2a9ax91; pushRLE(0x2D, _0x2a9ax8c, _0x2a9ax8e) } else { mSumPrints += _0x2a9ax5b; var _0x2a9ax87 = [6 + _0x2a9ax8a]; _0x2a9ax87[0] = 0x1F; _0x2a9ax87[1] = 0x2B; var _0x2a9ax7c = pushEBV(_0x2a9ax87, 2, _0x2a9ax89); _0x2a9ax7c = pushEBV(_0x2a9ax87, _0x2a9ax7c, _0x2a9ax8a); copyTo(_0x2a9ax87, _0x2a9ax7c, _0x2a9ax5e, _0x2a9ax89, mLineBytes); var _0x2a9ax7e = require(_0xf6be[8]); pushPackageWithData(_0x2a9ax7e[_0xf6be[10]](_0x2a9ax87, _0x2a9ax7c + _0x2a9ax8a)) } }; pushRepeat(_0x2a9ax5b - 1) } else { mSumPrints += _0x2a9ax5b; var _0x2a9ax92 = [4]; var _0x2a9ax7c = pushEBV(_0x2a9ax92, 0, (0x3FFF)); _0x2a9ax7c = pushEBV(_0x2a9ax92, _0x2a9ax7c, (_0x2a9ax89)); for (; _0x2a9ax5b > 0x3FFF; _0x2a9ax5b -= 0x3FFF + 1) { var _0x2a9ax7e = require(_0xf6be[8]); pushPackageWithData(_0x2a9ax7e.DataPackage7(0x21, _0x2a9ax92, 0, _0x2a9ax7c, _0x2a9ax5e, _0x2a9ax89, mLineBytes)) }; if (_0x2a9ax5b > 0) { _0x2a9ax7c = pushEBV(_0x2a9ax92, 0, (_0x2a9ax5b - 1)); _0x2a9ax7c = pushEBV(_0x2a9ax92, _0x2a9ax7c, (_0x2a9ax89)); var _0x2a9ax7e = require(_0xf6be[8]); pushPackageWithData(_0x2a9ax7e.DataPackage7(0x21, _0x2a9ax92, 0, _0x2a9ax7c, _0x2a9ax5e, _0x2a9ax89, mLineBytes)) } } } function getBit1Count(_0x2a9ax94) { return sBitCount[((_0x2a9ax94)) & 0xff] } function pushLineWithCount(_0x2a9ax5b) { if (_0x2a9ax5b <= 0) { return }; pushPrintDots(0, _0x2a9ax5b); mSumLines += _0x2a9ax5b; for (; _0x2a9ax5b > maxEBVValue; _0x2a9ax5b -= maxEBVValue + 1) { pushPackageWithCmd(CMD_PAGE_LINE, (maxEBVValue), true) }; if (_0x2a9ax5b > 0) { if (_0x2a9ax5b <= 0xFF) { pushPackageWithData(nullLineDataWithCount(_0x2a9ax5b)) } else { pushPackageWithCmd(CMD_PAGE_LINE, (_0x2a9ax5b - 1), true) } } } function nullLineDataWithCount(_0x2a9ax5b) { return [0x1B, 0x4A, _0x2a9ax5b] } function lineWithCount(_0x2a9ax5b) { switch (mLineAction) { case LineActionLine: { mLineCount += _0x2a9ax5b; return true }; case LineActionPrint: { pushPrint(); break }; default: return false }; mPrevData = mLineData; mPrevBytes = mLineBytes; mLineData = null; mLineBytes = 0; mLineCount = _0x2a9ax5b; mLineAction = LineActionLine; return true } function pushPackageWithData(_0x2a9ax5e) { var _0x2a9ax99 = new Array(); for (var _0x2a9ax44 = 0; _0x2a9ax44 < _0x2a9ax5e[_0xf6be[3]]; _0x2a9ax44++) { var _0x2a9ax9a = parseInt(_0x2a9ax5e[_0x2a9ax44]); var _0x2a9ax9b = _0x2a9ax9a.toString(16); if (_0x2a9ax9b[_0xf6be[3]] % 2 == 1) { var _0x2a9ax9c = _0xf6be[12] + _0x2a9ax9b; _0x2a9ax99[_0xf6be[13]](_0x2a9ax9c) } else { _0x2a9ax99[_0xf6be[13]](_0x2a9ax9b) } }; arrayBitmap[_0xf6be[13]](_0x2a9ax99[_0xf6be[5]](_0xf6be[14])) } function pushPackageWithCmd(_0x2a9ax84) { var _0x2a9ax7e = require(_0xf6be[8]); arrayBitmap[_0xf6be[13]]((_0x2a9ax7e.DataPackage1(_0x2a9ax84))) } function pushPackageWithCmd(_0x2a9ax84, _0x2a9ax9e, _0x2a9ax9f) { var _0x2a9ax7e = require(_0xf6be[8]); arrayBitmap[_0xf6be[13]]((_0x2a9ax7e.DataPackage3(_0x2a9ax84, _0x2a9ax9e, _0x2a9ax9f))) } module[_0xf6be[15]] = { arrayWithImage: arrayWithImage }; var sBitCount = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8]