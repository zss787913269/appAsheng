var _0x3311 = ['floor', 'width', 'min', 'DataPackage7', 'toString', './DataPackage', 'exports', 'DPI', 'value', 'length', 'push', 'obtain1', 'slice']; var _0xa9f5 = function (_0x3311ae, _0xa9f540) { _0x3311ae = _0x3311ae - 0x0; var _0x3411d8 = _0x3311[_0x3311ae]; return _0x3411d8; }; const HOST_TO_DEVICE_DATA_START = 0x1f; const DEVICE_TO_HOST_DATA_START = 0x1f; const FIXED_PACKAGE_CRC_RESULT = 0x88; const FIXED_NDEF_INTENT_START = 0xaa; const FIXED_NDEF_INTENT_END = 0xbb; const defaultThreshold = 0x80; const maxEBVValue = 0x3fff; const superBitmapRLELength = [0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0x18, 0x24, 0x30, 0x78]; const MySendMaxCount = 0xff; var supportSuperBitmap = ![]; const LineActionNone = 0x0; const LineActionLine = 0x1; const LineActionPrint = 0x2; var mByteWidth = 0x0; var mLineAction = LineActionNone; var mPrinterDPI = 0x0; var mPrinterWidth = 0x0; var mLineCount; var mLineBytes; var mLineData; var mPrevBytes; var mPrevData; var mPageParamOffset; var mLELineDots; var mLELineDotsCount; var mLELineDotsIndex; var mMaxSfDots; var mMaxLEDots; var mMinSfDots; var mTotalDots; var mSumLines; var mSumPrints; var mSumRLE_Xs; var mSumRLE_Ds; var mSumRepeats; var mRLEXSaved; var mRLEDSaved; var arrayBitmap; function copyTo(_0x565dbb, _0x3ebb34, _0x4cc41c, _0x162870, _0x5145b1) { if (_0x565dbb == _0x4cc41c) { if (_0x3ebb34 == _0x162870) return; if (_0x3ebb34 > _0x162870) { _0x3ebb34 += _0x5145b1 - _0x162870 - 0x1; for (--_0x5145b1; _0x5145b1 >= _0x162870; --_0x5145b1, --_0x3ebb34)_0x565dbb[_0x3ebb34] = _0x4cc41c[_0x5145b1]; return; } } for (; _0x162870 < _0x5145b1; ++_0x162870, ++_0x3ebb34)_0x565dbb[_0x3ebb34] = _0x4cc41c[_0x162870]; } function pageStartData() { return '1F200088'; } function pageEndData() { return [0x1f, 0x28, 0x0, 0x88]; } function pageWidthData(_0x3a36e2) { _0x3a36e2 = Math[_0xa9f5('0x0')]((_0x3a36e2 + 0x7) / 0x8); if (_0x3a36e2 >= 0xc0) { return [0x1f, 0x27, 0x2, 0xc0 | _0x3a36e2 >> 0x8, _0x3a36e2 & 0xff, 0x88]; } else { return [0x1f, 0x27, 0x1, _0x3a36e2, 0x88]; } } function pageHeightData(_0x56bf90) { if (_0x56bf90 > 0x3fff) { return [0x1f, 0x26, 0x3, 0xc0, 0x3fff | _0x56bf90 >> 0x8, _0x56bf90 & 0xff, 0x88]; } else if (_0x56bf90 >= 0xc0) { return [0x1f, 0x26, 0x2, 0xc0 | _0x56bf90 >> 0x8, _0x56bf90 & 0xff, 0x88]; } else { return [0x1f, 0x26, 0x1, _0x56bf90, 0x88]; } } function settingGapTypeData(_0x34bb77) { return [0x1f, 0x42, 0x1, _0x34bb77, 0x88]; } function settingGapLengthData(_0x567b99) { if (_0x567b99 > 0x3fff) { return [0x1f, 0x45, 0x3, 0xc0 | _0x567b99 >> 0x10, _0x567b99 >> 0x8, _0x567b99 & 0xff, 0x88]; } else if (_0x567b99 >= 0xc0) { return [0x1f, 0x45, 0x2, 0xc0 | _0x567b99 >> 0x8, _0x567b99 & 0xff, 0x88]; } else { return [0x1f, 0x45, 0x1, _0x567b99, 0x88]; } } function settingStrengthData(_0x12514d) { return [0x1f, 0x43, 0x1, _0x12514d, 0x88]; } function settingSpeedData(_0x5a0c59) { return [0x1f, 0x44, 0x1, _0x5a0c59, 0x88]; } function arrayWithImage(_0x3997b3, _0x15ef41, _0x12eb5c, _0x55d39d, _0x8dba72, _0x158379, _0x33c29c, _0xf02b4b) { supportSuperBitmap = _0xf02b4b; var _0x207ae1 = getApp()['globalData']['currentPrinter']; mPrinterDPI = _0x207ae1[_0xa9f5('0x7')]; mPrinterWidth = _0x207ae1[_0xa9f5('0x1')]; arrayBitmap = new Array(); mLELineDots = [mPrinterDPI * 0x3 / 25.4 + 0.5]; mLineAction = LineActionLine; mByteWidth = Math['floor']((mPrinterWidth + 0x7) / 0x8); mLineCount = 0x0; mLineBytes = 0x0; mLineData = null; mPrevBytes = 0x0; mPrevData = null; mLELineDotsCount = 0x0; mLELineDotsIndex = 0x0; mMaxSfDots = 0x0; mMaxLEDots = 0x0; mMinSfDots = 0x0; mTotalDots = 0x0; mSumLines = 0x0; mSumPrints = 0x0; mSumRLE_Xs = 0x0; mSumRLE_Ds = 0x0; mSumRepeats = 0x0; mRLEXSaved = 0x0; mRLEDSaved = 0x0; pushPackageWithData(pageWidthData(_0x15ef41)); pushPackageWithData(pageHeightData(_0x12eb5c)); if (_0x55d39d >= 0x0) { } if (_0x55d39d != 0x0) { } if (_0x158379 > 0x0) { } if (_0x33c29c > 0x0) { } parsePixelDatas(_0x3997b3, _0x15ef41, _0x12eb5c); switch (mLineAction) { case LineActionLine: { pushLineWithCount(mLineCount); break; } case LineActionPrint: { pushPrint(); pushLineWithCount(0x0); break; } default: return ![]; }mLineAction = LineActionNone; arrayBitmap['unshift'](pageStartData()); pushPackageWithData(pageEndData()); return arrayBitmap; } function parsePixelDatas(_0x1d065a, _0x260514, _0x2c5b00) { var _0x5d91f8; var _0x24e109 = 0x0; var _0x4c7cbc = Math['floor']((_0x260514 + 0x7) / 0x8); for (var _0x40a9a0 = 0x0; _0x40a9a0 < _0x2c5b00; _0x40a9a0++) { var _0x3cff4d = [_0x4c7cbc]; for (var _0x40df9e = 0x0; _0x40df9e < _0x4c7cbc; _0x40df9e++) { _0x3cff4d[_0x40df9e] = 0x0; } var _0x45332a = 0x0; var _0x1b0f56 = 0x0; var _0xa4c360 = 0x0; var _0x388eee = 0x0; var _0x2da2fe = 0x0; var _0x5c1fc1 = 0x0; var _0x1b6fca = 0x0; var _0x5284ab = 0x0; for (var _0x210efa = 0x0; _0x210efa < _0x260514; _0x210efa++) { var _0xf95209 = _0x210efa % 0x8; if (_0xf95209 == 0x0) { _0x45332a = 0x0; _0x1b0f56 = 0x0; _0xa4c360 = 0x0; _0x388eee = 0x0; _0x2da2fe = 0x0; _0x5c1fc1 = 0x0; _0x1b6fca = 0x0; _0x5284ab = 0x0; } var _0x29dc28 = (_0x260514 * _0x40a9a0 + _0x210efa) * 0x4; var _0x5cf929 = _0x1d065a[_0x29dc28 + 0x0]; var _0x3ac013 = _0x1d065a[_0x29dc28 + 0x1]; var _0x446d31 = _0x1d065a[_0x29dc28 + 0x2]; var _0x23b51e = _0x1d065a[_0x29dc28 + 0x3]; if (_0x23b51e > 0x0) { var _0x2d2986 = _0x5cf929 * 0.3 + _0x3ac013 * 0.59 + _0x446d31 * 0.11; if (_0x2d2986 <= defaultThreshold) { if (_0xf95209 == 0x0) { _0x45332a = 0x80; } else if (_0xf95209 == 0x1) { _0x1b0f56 = 0x80 >> 0x1; } else if (_0xf95209 == 0x2) { _0xa4c360 = 0x80 >> 0x2; } else if (_0xf95209 == 0x3) { _0x388eee = 0x80 >> 0x3; } else if (_0xf95209 == 0x4) { _0x2da2fe = 0x80 >> 0x4; } else if (_0xf95209 == 0x5) { _0x5c1fc1 = 0x80 >> 0x5; } else if (_0xf95209 == 0x6) { _0x1b6fca = 0x80 >> 0x6; } else if (_0xf95209 == 0x7) { _0x5284ab = 0x80 >> 0x7; } } } if (_0xf95209 == 0x7 || _0x210efa == _0x260514 - 0x1) { var _0x29dc28 = Math['floor'](_0x210efa / 0x8); var _0x51a8e9 = _0x45332a | _0x1b0f56 | _0xa4c360 | _0x388eee | _0x2da2fe | _0x5c1fc1 | _0x1b6fca | _0x5284ab; _0x3cff4d[_0x29dc28] = _0x51a8e9; } } var _0x2d5ac6 = _0x4c7cbc - 0x1; for (; _0x2d5ac6 >= 0x0; _0x2d5ac6--) { if (_0x3cff4d[_0x2d5ac6] != 0x0) { break; } } var _0x2eed81 = 0x0; for (; _0x2eed81 < _0x2d5ac6; _0x2eed81++) { if (_0x3cff4d[_0x2eed81] != 0x0) { break; } } var _0x4b4a97 = _0x2d5ac6 + 0x1 - _0x2eed81; var _0xcbfdd = [_0x4b4a97 + 0x4]; _0xcbfdd[0x0] = 0x1f; _0xcbfdd[0x1] = 0x2b; _0xcbfdd[0x2] = _0x2eed81; _0xcbfdd[0x3] = _0x4b4a97; if (_0x4b4a97 > 0x0) { for (var _0x209cd1 = 0x0; _0x209cd1 < _0x4b4a97; _0x209cd1++) { _0xcbfdd[_0x209cd1 + 0x4] = _0x3cff4d[_0x209cd1 + _0x2eed81]; } } if (_0x5d91f8 == null) { _0x5d91f8 = _0xcbfdd; pushPackageWithData(_0xcbfdd); } else { if (_0xcbfdd[_0xa9f5('0x4')]() == _0x5d91f8[_0xa9f5('0x4')]() && _0x24e109 < 0x96) { _0x24e109++; } else { if (_0x24e109 > 0x0) { var _0x292f8b = [0x1f, 0x2e, _0x24e109 - 0x1]; pushPackageWithData(_0x292f8b); _0x24e109 = 0x0; } _0x5d91f8 = _0xcbfdd; pushPackageWithData(_0xcbfdd); } } } if (_0x24e109 > 0x0) { var _0x292f8b = [0x1f, 0x2e, _0x24e109 - 0x1]; pushPackageWithData(_0x292f8b); } } function addNoneRow(_0x10e797) { if (_0x10e797 > 0x0) { if (_0x10e797 <= MySendMaxCount) { pushPackageWithData([0x1f, 0x2a, _0x10e797, 0x0, 0x0]); } else { for (var _0xaf3ecf = MySendMaxCount; _0xaf3ecf > 0x0;) { pushPackageWithData([0x1f, 0x2a, _0xaf3ecf, 0x0, 0x0]); _0x10e797 -= _0xaf3ecf; _0xaf3ecf = _0x10e797 > MySendMaxCount ? MySendMaxCount : _0x10e797; } } } } function printRow(_0x1fae63, _0x25885d) { if (mLineAction == LineActionNone) { return ![]; } var _0x146d4d; for (_0x146d4d = Math[_0xa9f5('0x2')](_0x1fae63['length'], mByteWidth) - 0x1; _0x146d4d >= 0x0; --_0x146d4d) { if (_0x1fae63[_0x146d4d] != 0x0) { break; } } if (_0x146d4d < 0x0) { return lineWithCount(_0x25885d); } ++_0x146d4d; switch (mLineAction) { case LineActionLine: { pushLineWithCount(mLineCount); break; } case LineActionPrint: { if (mLineBytes == _0x146d4d && equalsByteWithData1(mLineData, _0x1fae63, 0x0, _0x146d4d)) { mLineCount += _0x25885d; return !![]; } pushPrint(); break; } default: return ![]; }mPrevData = mLineData; mPrevBytes = mLineBytes; mLineData = _0x1fae63; mLineBytes = _0x146d4d; mLineCount = _0x25885d; mLineAction = LineActionPrint; return !![]; } function equalsByteWithData1(_0x39aa6f, _0x22dbf9, _0x25ffe3, _0x21e39b) { if (_0x25ffe3 < 0x0 || _0x25ffe3 >= _0x21e39b) { return ![]; } if (_0x21e39b > _0x39aa6f[_0xa9f5('0x9')] || _0x21e39b > _0x22dbf9[_0xa9f5('0x9')]) { return ![]; } var _0xa5cbc3 = _0x39aa6f['slice'](_0x25ffe3, _0x21e39b)['join'](); var _0x4b2ebd = _0x22dbf9[_0xa9f5('0xc')](_0x25ffe3, _0x21e39b)['join'](); if (_0xa5cbc3 != _0x4b2ebd) { return ![]; } return !![]; } function appendRLEData(_0x260544, _0x56ecb9, _0x994b3c, _0x334acc) { if (_0x334acc <= 0x0) return !![]; var _0x33ff45 = _0x56ecb9['value'] * 0x5 / 0x8; var _0x4702de = 0x10 - 0x1; while (_0x334acc > 0x0) { if (_0x334acc >= superBitmapRLELength[_0x4702de]) { _0x334acc -= superBitmapRLELength[_0x4702de]; var _0x4c6d93 = _0x4702de | (_0x994b3c ? 0x10 : 0x0); _0x56ecb9[_0xa9f5('0x8')] = _0x56ecb9[_0xa9f5('0x8')] + 0x1; if (_0x56ecb9[_0xa9f5('0x8')] * 0x5 > mByteWidth * 0x8) return ![]; switch (_0x56ecb9[_0xa9f5('0x8')] % 0x8) { case 0x0: _0x260544[_0x33ff45++] |= _0x4c6d93; break; case 0x1: _0x260544[_0x33ff45] |= _0x4c6d93 << 0x3; break; case 0x2: _0x260544[_0x33ff45++] |= _0x4c6d93 >>> 0x2; _0x260544[_0x33ff45] |= (_0x4c6d93 & 0x3) << 0x6; break; case 0x3: _0x260544[_0x33ff45] |= _0x4c6d93 << 0x1; break; case 0x4: _0x260544[_0x33ff45++] |= _0x4c6d93 >>> 0x4; _0x260544[_0x33ff45] |= (_0x4c6d93 & 0xf) << 0x4; break; case 0x5: _0x260544[_0x33ff45++] |= _0x4c6d93 >>> 0x1; _0x260544[_0x33ff45] |= (_0x4c6d93 & 0x1) << 0x7; break; case 0x6: _0x260544[_0x33ff45] |= _0x4c6d93 << 0x2; break; case 0x7: _0x260544[_0x33ff45++] |= _0x4c6d93 >>> 0x3; _0x260544[_0x33ff45] |= (_0x4c6d93 & 0x7) << 0x5; break; default: break; } } else { --_0x4702de; } } return !![]; } function calcRLEX(_0x122759, _0x4ffc2d, _0x173a89) { if (_0x4ffc2d <= 0x0) return 0x0; var _0x348da7 = 0x0; var _0x1f25c4 = 0x0; var _0x51460a = ![]; var _0x5d4467 = 0x80; var _0x4f05f9 = { 'value': 0x0 }; while (!![]) { if ((_0x122759[_0x1f25c4] & _0x5d4467) != 0x0) { if (_0x51460a) { ++_0x348da7; } else { if (!appendRLEData(_0x173a89, _0x4f05f9, ![], _0x348da7)) return 0x0; _0x51460a = !![]; _0x348da7 = 0x1; } } else { if (_0x51460a) { if (!appendRLEData(_0x173a89, _0x4f05f9, !![], _0x348da7)) return 0x0; _0x51460a = ![]; _0x348da7 = 0x1; } else { ++_0x348da7; } } if (_0x5d4467 == 0x1) { ++_0x1f25c4; if (_0x1f25c4 >= _0x4ffc2d) break; _0x5d4467 = 0x80; } else { _0x5d4467 >>>= 0x1; } } if (_0x51460a && !appendRLEData(_0x173a89, _0x4f05f9, !![], _0x348da7)) return 0x0; return _0x4f05f9['value']; } function calcRLED(_0x569942, _0x364bd9, _0x264e68, _0x1577d1, _0x9caa0f) { var _0x18a75a = 0x0; var _0x340504 = 0x0; var _0x25420a = ![]; var _0x1c09c3 = 0x80; var _0x7b3981 = { 'value': 0x0 }; var _0x51cb44 = Math[_0xa9f5('0x2')](_0x364bd9, _0x1577d1); if (_0x51cb44 > 0x0) { while (!![]) { if ((_0x264e68[_0x340504] & _0x1c09c3) != (_0x569942[_0x340504] & _0x1c09c3)) { if (_0x25420a) { ++_0x18a75a; } else { if (!appendRLEData(_0x9caa0f, _0x7b3981, ![], _0x18a75a)) return 0x0; _0x25420a = !![]; _0x18a75a = 0x1; } } else { if (_0x25420a) { if (!appendRLEData(_0x9caa0f, _0x7b3981, !![], _0x18a75a)) return 0x0; _0x25420a = ![]; _0x18a75a = 0x1; } else { ++_0x18a75a; } } if (_0x1c09c3 == 0x1) { ++_0x340504; if (_0x340504 >= _0x51cb44) break; _0x1c09c3 = 0x80; } else { _0x1c09c3 >>>= 0x1; } } } if (_0x364bd9 != _0x1577d1) { if (_0x364bd9 < _0x1577d1) { _0x569942 = _0x264e68; _0x364bd9 = _0x1577d1; } _0x1c09c3 = 0x80; while (!![]) { if (0x0 != (_0x569942[_0x340504] & _0x1c09c3)) { if (_0x25420a) { ++_0x18a75a; } else { if (!appendRLEData(_0x9caa0f, _0x7b3981, ![], _0x18a75a)) return 0x0; _0x25420a = !![]; _0x18a75a = 0x1; } } else { if (_0x25420a) { if (!appendRLEData(_0x9caa0f, _0x7b3981, !![], _0x18a75a)) return 0x0; _0x25420a = ![]; _0x18a75a = 0x1; } else { ++_0x18a75a; } } if (_0x1c09c3 == 0x1) { ++_0x340504; if (_0x340504 >= _0x364bd9) break; _0x1c09c3 = 0x80; } else { _0x1c09c3 >>>= 0x1; } } } if (_0x25420a && !appendRLEData(_0x9caa0f, _0x7b3981, !![], _0x18a75a)) return 0x0; return _0x7b3981['value']; } function pushEBV(_0x33aa82, _0xa2f003, _0x60c958) { if (_0x60c958 >= 0xc0) { _0x33aa82[_0xa2f003 + 0x0] = _0x60c958 >>> 0x8 | 0xc0; _0x33aa82[_0xa2f003 + 0x1] = _0x60c958 & 0xff; return _0xa2f003 + 0x2; } else { _0x33aa82[_0xa2f003 + 0x0] = _0x60c958; return _0xa2f003 + 0x1; } } function pushRepeat(_0x33fba3) { if (_0x33fba3 <= 0x0) { return; } mSumRepeats += _0x33fba3; var _0x363e21 = [0x1f, 0x2e, 0x0, 0x0]; for (; _0x33fba3 > maxEBVValue; _0x33fba3 -= maxEBVValue + 0x1) { pushEBV(_0x363e21, 0x2, maxEBVValue); var _0x527cad = require('./DataPackage'); pushPackageWithData(_0x527cad[_0xa9f5('0xb')](_0x363e21)); } if (_0x33fba3 > 0x0) { var _0x196057 = pushEBV(_0x363e21, 0x2, _0x33fba3 - 0x1); var _0x527cad = require('./DataPackage'); pushPackageWithData(_0x527cad['obtain2'](_0x363e21, _0x196057)); } } function pushPrintDots(_0x117a41, _0x3d8217) { if (mMaxSfDots < _0x117a41) { mMaxSfDots = _0x117a41; } else if (_0x117a41 > 0x0) { if (mMinSfDots == 0x0 || mMinSfDots > _0x117a41) mMinSfDots = _0x117a41; } mTotalDots += _0x117a41 * _0x3d8217; if (_0x3d8217 >= mLELineDots[_0xa9f5('0x9')]) { for (var _0x59b04d = 0x0; _0x59b04d < mLELineDots[_0xa9f5('0x9')]; ++_0x59b04d)mLELineDots[_0x59b04d] = _0x117a41; mLELineDotsCount = mLELineDots[_0xa9f5('0x9')] * _0x117a41; if (mMaxLEDots < _0x117a41) mMaxLEDots = _0x117a41; } else { mLELineDotsCount += _0x3d8217 * _0x117a41; for (var _0x59b04d = 0x0; _0x59b04d < _0x3d8217; ++_0x59b04d) { mLELineDotsCount -= mLELineDots[mLELineDotsIndex]; mLELineDots[mLELineDotsIndex] = _0x117a41; ++mLELineDotsIndex; if (mLELineDotsIndex >= mLELineDots[_0xa9f5('0x9')]) mLELineDotsIndex = 0x0; } var _0x80f8ff = mLELineDotsCount / mLELineDots['length']; if (mMaxLEDots < _0x80f8ff) mMaxLEDots = _0x80f8ff; } } function pushRLE(_0x412b5d, _0x383528, _0x14bffa) { if (_0x14bffa <= 0x0) return; var _0x31b010 = (_0x14bffa * 0x5 + 0x8 - 0x1) / 0x8; var _0x1b07b0 = [0x2 + 0x2 + _0x31b010 + 0x4]; _0x1b07b0[0x0] = 0x1f; _0x1b07b0[0x1] = _0x412b5d; var _0xfe6860 = pushEBV(_0x1b07b0, 0x2, _0x14bffa); copyTo(_0x1b07b0, _0xfe6860, _0x383528, 0x0, _0x31b010); var _0x273365 = require(_0xa9f5('0x5')); pushPackageWithData(_0x273365['obtain3'](_0x1b07b0, 0x0, _0xfe6860 + _0x31b010)); } function pushPrint() { if (mLineCount <= 0x0) { return; } var _0x47cbe7 = mLineData; var _0x34062e = mLineCount; var _0x83442e = 0x0; var _0x1dbcaf = 0x0; var _0x45e140 = 0x0; for (; _0x83442e < mLineBytes; ++_0x83442e) { if (_0x47cbe7[_0x83442e] != 0x0) { break; } } _0x1dbcaf = mLineBytes - _0x83442e; for (var _0x4ac01a = _0x83442e; _0x4ac01a < mLineBytes; ++_0x4ac01a) { _0x45e140 += getBit1Count(_0x47cbe7[_0x4ac01a]); } pushPrintDots(_0x45e140, _0x34062e); if (mSumPrints > 0x0) { var _0x23b29f = [mByteWidth + 0x4]; var _0x2f27e8 = [mByteWidth + 0x4]; var _0x57b39a = 0x0; var _0x2d18f8 = 0x0; _0x57b39a = calcRLEX(_0x47cbe7, mLineBytes, _0x23b29f); _0x2d18f8 = calcRLED(mPrevData, mPrevBytes, _0x47cbe7, mLineBytes, _0x2f27e8); var _0x2b04f4 = (_0x83442e >= 0xc0 ? 0x4 : 0x3) + (_0x1dbcaf >= 0xc0 ? 0x2 : 0x1) + _0x1dbcaf; var _0x1187ae = _0x57b39a <= 0x0 ? mByteWidth + 0x64 : (_0x57b39a * 0x5 + 0x8 - 0x1) / 0x8 + (_0x57b39a >= 0xc0 ? 0x4 : 0x3); var _0x370902 = _0x2d18f8 <= 0x0 ? mByteWidth + 0x64 : (_0x2d18f8 * 0x5 + 0x8 - 0x1) / 0x8 + (_0x2d18f8 >= 0xc0 ? 0x4 : 0x3); if (_0x1187ae < _0x2b04f4 && _0x1187ae <= _0x370902) { mSumRLE_Xs += _0x34062e; mRLEXSaved += _0x2b04f4 - _0x1187ae; pushRLE(0x2c, _0x23b29f, _0x57b39a); } else if (_0x370902 < _0x2b04f4) { mSumRLE_Ds += _0x34062e; mRLEDSaved += _0x2b04f4 - _0x370902; pushRLE(0x2d, _0x2f27e8, _0x2d18f8); } else { mSumPrints += _0x34062e; var _0x304042 = [0x6 + _0x1dbcaf]; _0x304042[0x0] = 0x1f; _0x304042[0x1] = 0x2b; var _0x1b5dcb = pushEBV(_0x304042, 0x2, _0x83442e); _0x1b5dcb = pushEBV(_0x304042, _0x1b5dcb, _0x1dbcaf); copyTo(_0x304042, _0x1b5dcb, _0x47cbe7, _0x83442e, mLineBytes); var _0x48e9bf = require('./DataPackage'); pushPackageWithData(_0x48e9bf['obtain2'](_0x304042, _0x1b5dcb + _0x1dbcaf)); } pushRepeat(_0x34062e - 0x1); } else { mSumPrints += _0x34062e; var _0x24936e = [0x4]; var _0x1b5dcb = pushEBV(_0x24936e, 0x0, 0x3fff); _0x1b5dcb = pushEBV(_0x24936e, _0x1b5dcb, _0x83442e); for (; _0x34062e > 0x3fff; _0x34062e -= 0x3fff + 0x1) { var _0x48e9bf = require('./DataPackage'); pushPackageWithData(_0x48e9bf[_0xa9f5('0x3')](0x21, _0x24936e, 0x0, _0x1b5dcb, _0x47cbe7, _0x83442e, mLineBytes)); } if (_0x34062e > 0x0) { _0x1b5dcb = pushEBV(_0x24936e, 0x0, _0x34062e - 0x1); _0x1b5dcb = pushEBV(_0x24936e, _0x1b5dcb, _0x83442e); var _0x48e9bf = require('./DataPackage'); pushPackageWithData(_0x48e9bf['DataPackage7'](0x21, _0x24936e, 0x0, _0x1b5dcb, _0x47cbe7, _0x83442e, mLineBytes)); } } } function getBit1Count(_0x558d83) { return sBitCount[_0x558d83 & 0xff]; } function pushLineWithCount(_0x5ea115) { if (_0x5ea115 <= 0x0) { return; } pushPrintDots(0x0, _0x5ea115); mSumLines += _0x5ea115; for (; _0x5ea115 > maxEBVValue; _0x5ea115 -= maxEBVValue + 0x1) { pushPackageWithCmd(CMD_PAGE_LINE, maxEBVValue, !![]); } if (_0x5ea115 > 0x0) { if (_0x5ea115 <= 0xff) { pushPackageWithData(nullLineDataWithCount(_0x5ea115)); } else { pushPackageWithCmd(CMD_PAGE_LINE, _0x5ea115 - 0x1, !![]); } } } function nullLineDataWithCount(_0x26f122) { return [0x1b, 0x4a, _0x26f122]; } function lineWithCount(_0x32db86) { switch (mLineAction) { case LineActionLine: { mLineCount += _0x32db86; return !![]; } case LineActionPrint: { pushPrint(); break; } default: return ![]; }mPrevData = mLineData; mPrevBytes = mLineBytes; mLineData = null; mLineBytes = 0x0; mLineCount = _0x32db86; mLineAction = LineActionLine; return !![]; } function pushPackageWithData(_0x1eaf01) { var _0x4de9e7 = new Array(); for (var _0x562e62 = 0x0; _0x562e62 < _0x1eaf01[_0xa9f5('0x9')]; _0x562e62++) { var _0x4c9bb3 = parseInt(_0x1eaf01[_0x562e62]); var _0x2dd1a8 = _0x4c9bb3[_0xa9f5('0x4')](0x10); if (_0x2dd1a8['length'] % 0x2 == 0x1) { var _0x3882b0 = '0' + _0x2dd1a8; _0x4de9e7['push'](_0x3882b0); } else { _0x4de9e7['push'](_0x2dd1a8); } } arrayBitmap[_0xa9f5('0xa')](_0x4de9e7['join']('')); } module[_0xa9f5('0x6')] = { 'arrayWithImage': arrayWithImage }; var sBitCount = [0x0, 0x1, 0x1, 0x2, 0x1, 0x2, 0x2, 0x3, 0x1, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x1, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x1, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x1, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x4, 0x5, 0x5, 0x6, 0x5, 0x6, 0x6, 0x7, 0x1, 0x2, 0x2, 0x3, 0x2, 0x3, 0x3, 0x4, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x4, 0x5, 0x5, 0x6, 0x5, 0x6, 0x6, 0x7, 0x2, 0x3, 0x3, 0x4, 0x3, 0x4, 0x4, 0x5, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x4, 0x5, 0x5, 0x6, 0x5, 0x6, 0x6, 0x7, 0x3, 0x4, 0x4, 0x5, 0x4, 0x5, 0x5, 0x6, 0x4, 0x5, 0x5, 0x6, 0x5, 0x6, 0x6, 0x7, 0x4, 0x5, 0x5, 0x6, 0x5, 0x6, 0x6, 0x7, 0x5, 0x6, 0x6, 0x7, 0x6, 0x7, 0x7, 0x8];