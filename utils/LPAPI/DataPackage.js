var _0x19ac = ["\x6C\x65\x6E\x67\x74\x68", "\x65\x78\x70\x6F\x72\x74\x73"]; var HOST_TO_DEVICE_DATA_START = 0x1F; var DEVICE_TO_HOST_DATA_START = 0x1F; var mCMD; var mData; function setNewPackageStart() { HOST_TO_DEVICE_DATA_START = 0x1F; DEVICE_TO_HOST_DATA_START = 0x1F } function setOldPackageStart() { HOST_TO_DEVICE_DATA_START = 0xAA; DEVICE_TO_HOST_DATA_START = 0xBB } function isNewPackageStart() { return HOST_TO_DEVICE_DATA_START == 0x1F } function copyTo(_0x9bd8x9, _0x9bd8xa, _0x9bd8xb, _0x9bd8xc, _0x9bd8xd) { if (_0x9bd8x9 == _0x9bd8xb) { if (_0x9bd8xa == _0x9bd8xc) { return }; if (_0x9bd8xa > _0x9bd8xc) { _0x9bd8xa += _0x9bd8xd - _0x9bd8xc - 1; for (--_0x9bd8xd; _0x9bd8xd >= _0x9bd8xc; --_0x9bd8xd, --_0x9bd8xa) { _0x9bd8x9[_0x9bd8xa] = _0x9bd8xb[_0x9bd8xd] }; return } }; for (; _0x9bd8xc < _0x9bd8xd; ++_0x9bd8xc, ++_0x9bd8xa) { _0x9bd8x9[_0x9bd8xa] = _0x9bd8xb[_0x9bd8xc] } } function obtain1(_0x9bd8xf) { DataPackage2(0x00, _0x9bd8xf); return toData() } function obtain2(_0x9bd8xf, _0x9bd8x11) { return obtain3(_0x9bd8xf, 0, _0x9bd8x11) } function obtain3(_0x9bd8xf, _0x9bd8x13, _0x9bd8x11) { if (_0x9bd8x13 == 0 && _0x9bd8x11 == _0x9bd8xf[_0x19ac[0]]) { return obtain1(_0x9bd8xf) }; var _0x9bd8x14 = [_0x9bd8x11 - _0x9bd8x13]; copyTo(_0x9bd8x14, 0, _0x9bd8xf, _0x9bd8x13, _0x9bd8x11); return obtain1(_0x9bd8x14) } function DataPackage1(_0x9bd8x16) { mCMD = _0x9bd8x16; mData = null; return toData() } function DataPackage2(_0x9bd8x16, _0x9bd8xf) { mCMD = _0x9bd8x16; mData = _0x9bd8xf; return toData() } function DataPackage7(_0x9bd8x16, _0x9bd8x19, _0x9bd8x1a, _0x9bd8x1b, _0x9bd8x1c, _0x9bd8x1d, _0x9bd8x1e) { mCMD = _0x9bd8x16; mData = [(_0x9bd8x1b - _0x9bd8x1a) + (_0x9bd8x1e - _0x9bd8x1d)]; copyTo(mData, 0, _0x9bd8x19, _0x9bd8x1a, _0x9bd8x1b); copyTo(mData, _0x9bd8x1b - _0x9bd8x1a, _0x9bd8x1c, _0x9bd8x1d, _0x9bd8x1e); return toData() } function DataPackage3(_0x9bd8x16, _0x9bd8xf, _0x9bd8x20) { mCMD = _0x9bd8x16; if (_0x9bd8x20) { if (_0x9bd8xf >= 0xC0) { mData = [2]; mData[0] = ((_0x9bd8xf >>> 8) | 0xC0); mData[1] = (_0x9bd8xf & 0xff) } else { mData = [1]; mData[0] = (_0x9bd8xf & 0xff) } } else { mData = [2]; mData[0] = (_0x9bd8xf >>> 8); mData[1] = (_0x9bd8xf & 0xff) }; return toData() } function getDataLen() { return mData[_0x19ac[0]] } function getPackageLen() { var _0x9bd8x23 = getDataLen(); if (mCMD == 0x00) { return _0x9bd8x23 }; return _0x9bd8x23 >= 0xC0 ? _0x9bd8x23 + 5 : _0x9bd8x23 + 4 } function calcCRC(_0x9bd8xf) { return calcCRC(_0x9bd8xf, 0, _0x9bd8xf[_0x19ac[0]]) } function calcCRC(_0x9bd8xf, _0x9bd8x13, _0x9bd8x11) { var _0x9bd8x25 = 0; for (; _0x9bd8x13 < _0x9bd8x11; ++_0x9bd8x13) { _0x9bd8x25 += parseInt(_0x9bd8xf[_0x9bd8x13]) }; return (~_0x9bd8x25) } function toInteger(_0x9bd8x27) { return (_0x9bd8x27) & 0xff } function toData() { if (mCMD == 0x00) { return mData }; var _0x9bd8x29 = getPackageLen(); var _0x9bd8x25 = [_0x9bd8x29]; _0x9bd8x25[0] = HOST_TO_DEVICE_DATA_START; _0x9bd8x25[1] = mCMD; var _0x9bd8x23 = getDataLen(); if (_0x9bd8x23 >= 0xC0) { _0x9bd8x25[2] = ((_0x9bd8x23 >>> 8) | 0xC0); _0x9bd8x25[3] = (_0x9bd8x23 & 0xFF); copyTo(_0x9bd8x25, 4, mData, 0, _0x9bd8x23); _0x9bd8x25[_0x9bd8x23 + 4] = calcCRC(_0x9bd8x25, 1, _0x9bd8x23 + 4) } else { _0x9bd8x25[2] = (_0x9bd8x23); copyTo(_0x9bd8x25, 3, mData, 0, _0x9bd8x23); _0x9bd8x25[_0x9bd8x23 + 3] = calcCRC(_0x9bd8x25, 1, _0x9bd8x23 + 3) }; return _0x9bd8x25 } module[_0x19ac[1]] = { obtain1: obtain1, obtain2: obtain2, obtain3: obtain3, DataPackage1: DataPackage1, DataPackage2: DataPackage2, DataPackage3: DataPackage3, DataPackage7: DataPackage7 }